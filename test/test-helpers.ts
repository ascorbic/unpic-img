import {
  CoreImageAttributes,
  transformProps,
  UnpicImageProps,
} from "@unpic/core";
import { expect } from "vitest";

export function normalise(value: unknown) {
  if (value === undefined || value === null) {
    return null;
  }
  return value.toString();
}

/**
 * Given an HTMLImageElement and a set of component props, assert that the generated
 * element matches the props generated by transformProps, when passed those props.
 * @param image The image element rendered by the component
 * @param providedProps The props passed to the component
 */
export function expectPropsToMatchTransformed(
  image: HTMLImageElement,
  providedProps: UnpicImageProps<
    CoreImageAttributes<CSSStyleDeclaration>,
    CSSStyleDeclaration
  >
) {
  const expected = transformProps<
    CoreImageAttributes<CSSStyleDeclaration>,
    CSSStyleDeclaration
  >(providedProps);

  for (const [key, value] of Object.entries(expected)) {
    if (key === "style") {
      for (const [styleKey, styleValue] of Object.entries(value)) {
        if (styleValue) {
          expect(normalise(image.style.getPropertyValue(styleKey))).toBe(
            normalise(styleValue)
          );
        }
      }
    } else {
      expect(normalise(image.getAttribute(key)), `${key} does not match`).toBe(
        normalise(value)
      );
    }
  }
}

export const testCases = [
  {
    src: "https://images.unsplash.com/photo-1674255909399-9bcb2cab6489?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=996&q=80",
    layout: "fullWidth",
    alt: "The beach",
    priority: true,
    height: 400,
    background: "auto",
  },
  {
    src: "https://cdn.shopify.com/static/sample-images/bath_grande_crop_center.jpeg",
    layout: "constrained",
    width: 800,
    height: 600,
    alt: "A lovely bath",
  },
  {
    src: "https://bunnyoptimizerdemo.b-cdn.net/bunny7.jpg?width=300",
    layout: "fixed",
    width: 400,
    height: 300,
    alt: "Bunny.net",
  },
] as const;
