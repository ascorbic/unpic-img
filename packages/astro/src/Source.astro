---
import {
  inferImageDimensions,
  transformSourceProps,
  type UnpicSourceProps as UnpicBaseSourceProps,
} from "@unpic/core";
import { imageConfig } from "astro:assets";
import type { UnpicConfig } from "./service";
import { getDefaultImageCdn, getEndpointOptions } from "./utils";

export interface UnpicSourceProps extends Omit<UnpicBaseSourceProps, "src"> {
  src: string | ImageMetadata;
}

type Props = UnpicSourceProps;

const props = Astro.props as Props;

let sourceProps: UnpicBaseSourceProps;

if (typeof props.src === "object") {
  sourceProps = {
    ...props,
    src: props.src.src,
    ...inferImageDimensions(props, props.src),
  } as UnpicBaseSourceProps;
} else {
  sourceProps = props as UnpicBaseSourceProps;
}

const config: UnpicConfig = imageConfig.service?.config;

sourceProps.layout ||= config?.layout;

if (!sourceProps.cdn && !sourceProps.fallback) {
  sourceProps.fallback = getDefaultImageCdn(config);
}

if (sourceProps.cdn === "astro" || sourceProps.fallback === "astro") {
  sourceProps.options = getEndpointOptions(imageConfig, sourceProps.options);
}
---

<source {...transformSourceProps(sourceProps)} />
