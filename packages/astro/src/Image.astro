---
import {
  inferImageDimensions,
  transformProps,
  type UnpicImageProps,
} from "@unpic/core";
import type { ImageMetadata } from "astro";

import type { HTMLAttributes } from "astro/types";
import { getBackground } from "./background";
import { imageConfig } from "astro:assets";
import type { UnpicConfig } from "./service";
import { getDefaultImageCdn, getEndpointOptions } from "./utils";

export interface UnpicProps
  extends Omit<UnpicImageProps<HTMLAttributes<"img">>, "src"> {
  placeholder?: "none" | "blurhash" | "dominantColor" | "lqip" | ({} & string);
  src: string | ImageMetadata;
}

type Props = UnpicProps;

const { placeholder, ...props }: Props = Astro.props;

let imgProps: UnpicImageProps<HTMLAttributes<"img">>;

if (typeof props.src === "object") {
  imgProps = {
    ...props,
    src: props.src.src,
    ...inferImageDimensions(props, props.src),
  } as UnpicImageProps<HTMLAttributes<"img">>;
} else {
  imgProps = {
    ...props,
  } as UnpicImageProps<HTMLAttributes<"img">>;
}

const config: UnpicConfig = imageConfig.service?.config;

imgProps.layout ||= config?.layout;
imgProps.background ||= placeholder ?? config?.placeholder;

imgProps.background = await getBackground(imgProps);

if (!imgProps.cdn && !imgProps.fallback) {
  imgProps.fallback = getDefaultImageCdn(config);
}

if (imgProps.cdn === "astro" || imgProps.fallback === "astro") {
  imgProps.options = getEndpointOptions(imageConfig, imgProps.options);
}
---

<img {...transformProps(imgProps)} />
